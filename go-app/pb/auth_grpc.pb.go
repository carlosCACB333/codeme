// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthSvc_SignUp_FullMethodName = "/pb.AuthSvc/SignUp"
	AuthSvc_SignIn_FullMethodName = "/pb.AuthSvc/SignIn"
)

// AuthSvcClient is the client API for AuthSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSvcClient interface {
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error)
}

type authSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSvcClient(cc grpc.ClientConnInterface) AuthSvcClient {
	return &authSvcClient{cc}
}

func (c *authSvcClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error) {
	out := new(SignUpRes)
	err := c.cc.Invoke(ctx, AuthSvc_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvcClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error) {
	out := new(SignInRes)
	err := c.cc.Invoke(ctx, AuthSvc_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSvcServer is the server API for AuthSvc service.
// All implementations must embed UnimplementedAuthSvcServer
// for forward compatibility
type AuthSvcServer interface {
	SignUp(context.Context, *SignUpReq) (*SignUpRes, error)
	SignIn(context.Context, *SignInReq) (*SignInRes, error)
	mustEmbedUnimplementedAuthSvcServer()
}

// UnimplementedAuthSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSvcServer struct {
}

func (UnimplementedAuthSvcServer) SignUp(context.Context, *SignUpReq) (*SignUpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthSvcServer) SignIn(context.Context, *SignInReq) (*SignInRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthSvcServer) mustEmbedUnimplementedAuthSvcServer() {}

// UnsafeAuthSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSvcServer will
// result in compilation errors.
type UnsafeAuthSvcServer interface {
	mustEmbedUnimplementedAuthSvcServer()
}

func RegisterAuthSvcServer(s grpc.ServiceRegistrar, srv AuthSvcServer) {
	s.RegisterService(&AuthSvc_ServiceDesc, srv)
}

func _AuthSvc_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthSvc_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSvc_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSvcServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthSvc_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSvcServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSvc_ServiceDesc is the grpc.ServiceDesc for AuthSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthSvc",
	HandlerType: (*AuthSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AuthSvc_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AuthSvc_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
